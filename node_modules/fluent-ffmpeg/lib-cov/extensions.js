/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['extensions.js']) {
  _$jscoverage['extensions.js'] = [];
  _$jscoverage['extensions.js'][2] = 0;
  _$jscoverage['extensions.js'][4] = 0;
  _$jscoverage['extensions.js'][6] = 0;
  _$jscoverage['extensions.js'][7] = 0;
  _$jscoverage['extensions.js'][10] = 0;
  _$jscoverage['extensions.js'][11] = 0;
  _$jscoverage['extensions.js'][12] = 0;
  _$jscoverage['extensions.js'][14] = 0;
  _$jscoverage['extensions.js'][17] = 0;
  _$jscoverage['extensions.js'][18] = 0;
  _$jscoverage['extensions.js'][19] = 0;
  _$jscoverage['extensions.js'][20] = 0;
  _$jscoverage['extensions.js'][22] = 0;
  _$jscoverage['extensions.js'][29] = 0;
  _$jscoverage['extensions.js'][30] = 0;
  _$jscoverage['extensions.js'][31] = 0;
  _$jscoverage['extensions.js'][34] = 0;
  _$jscoverage['extensions.js'][36] = 0;
  _$jscoverage['extensions.js'][39] = 0;
  _$jscoverage['extensions.js'][42] = 0;
  _$jscoverage['extensions.js'][44] = 0;
  _$jscoverage['extensions.js'][47] = 0;
  _$jscoverage['extensions.js'][48] = 0;
  _$jscoverage['extensions.js'][50] = 0;
  _$jscoverage['extensions.js'][51] = 0;
  _$jscoverage['extensions.js'][52] = 0;
  _$jscoverage['extensions.js'][53] = 0;
  _$jscoverage['extensions.js'][60] = 0;
  _$jscoverage['extensions.js'][61] = 0;
  _$jscoverage['extensions.js'][62] = 0;
  _$jscoverage['extensions.js'][64] = 0;
  _$jscoverage['extensions.js'][65] = 0;
  _$jscoverage['extensions.js'][67] = 0;
  _$jscoverage['extensions.js'][68] = 0;
  _$jscoverage['extensions.js'][70] = 0;
  _$jscoverage['extensions.js'][71] = 0;
  _$jscoverage['extensions.js'][73] = 0;
}
_$jscoverage['extensions.js'].source = ["","exports = module.exports = function Extensions() {","","  this.ffmpegPath = process.env.FFMPEG_PATH || 'ffmpeg';","","  this.setFfmpegPath = function(path) {","    this.ffmpegPath = path;","  };","","  this.determineFfmpegPath = function() {","    if (process.env.FFMPEG_PATH) {","      return process.env.FFMPEG_PATH;","    }","    return 'ffmpeg';","  };","","  this.toAspectRatio = function(ar) {","    var p = ar.split(':');","    if (p.length !== 2) {","      return undefined;","    } else {","      return {","        x: parseInt(p[0], 10),","        y: parseInt(p[1], 10)","      };","    }","  };","","  this.ffmpegTimemarkToSeconds = function(timemark) {","    var parts = timemark.split(':');","    var secs = 0;","","    // add hours","    secs += parseInt(parts[0], 10) * 3600;","    // add minutes","    secs += parseInt(parts[1], 10) * 60;","","    // split sec/msec part","    var secParts = parts[2].split('.');","","    // add seconds","    secs += parseInt(secParts[0], 10);","","    return secs;","  };","","  this.parseVersionString = function(versionstr) {","     var x = versionstr.split('.');","    // parse from string or default to 0 if can't parse","    var maj = parseInt(x[0], 10) || 0;","    var min = parseInt(x[1], 10) || 0;","    var pat = parseInt(x[2], 10) || 0;","    return {","      major: maj,","      minor: min,","      patch: pat","    };","  };","","  this.atLeastVersion = function(actualVersion, minVersion) {","    var minimum = this.parseVersionString(minVersion);","    var running = this.parseVersionString(actualVersion);","","    if (running.major !== minimum.major) {","      return (running.major &gt; minimum.major);","    } else {","      if (running.minor !== minimum.minor) {","        return (running.minor &gt; minimum.minor);","      } else {","        if (running.patch !== minimum.patch) {","          return (running.patch &gt; minimum.patch);","        } else {","          return true;","        }","      }","    }","  };","};"];
_$jscoverage['extensions.js'][2]++;
exports = (module.exports = (function Extensions() {
  _$jscoverage['extensions.js'][4]++;
  this.ffmpegPath = (process.env.FFMPEG_PATH || "ffmpeg");
  _$jscoverage['extensions.js'][6]++;
  this.setFfmpegPath = (function (path) {
  _$jscoverage['extensions.js'][7]++;
  this.ffmpegPath = path;
});
  _$jscoverage['extensions.js'][10]++;
  this.determineFfmpegPath = (function () {
  _$jscoverage['extensions.js'][11]++;
  if (process.env.FFMPEG_PATH) {
    _$jscoverage['extensions.js'][12]++;
    return process.env.FFMPEG_PATH;
  }
  _$jscoverage['extensions.js'][14]++;
  return "ffmpeg";
});
  _$jscoverage['extensions.js'][17]++;
  this.toAspectRatio = (function (ar) {
  _$jscoverage['extensions.js'][18]++;
  var p = ar.split(":");
  _$jscoverage['extensions.js'][19]++;
  if ((p.length !== 2)) {
    _$jscoverage['extensions.js'][20]++;
    return undefined;
  }
  else {
    _$jscoverage['extensions.js'][22]++;
    return ({x: parseInt(p[0], 10), y: parseInt(p[1], 10)});
  }
});
  _$jscoverage['extensions.js'][29]++;
  this.ffmpegTimemarkToSeconds = (function (timemark) {
  _$jscoverage['extensions.js'][30]++;
  var parts = timemark.split(":");
  _$jscoverage['extensions.js'][31]++;
  var secs = 0;
  _$jscoverage['extensions.js'][34]++;
  secs += (parseInt(parts[0], 10) * 3600);
  _$jscoverage['extensions.js'][36]++;
  secs += (parseInt(parts[1], 10) * 60);
  _$jscoverage['extensions.js'][39]++;
  var secParts = parts[2].split(".");
  _$jscoverage['extensions.js'][42]++;
  secs += parseInt(secParts[0], 10);
  _$jscoverage['extensions.js'][44]++;
  return secs;
});
  _$jscoverage['extensions.js'][47]++;
  this.parseVersionString = (function (versionstr) {
  _$jscoverage['extensions.js'][48]++;
  var x = versionstr.split(".");
  _$jscoverage['extensions.js'][50]++;
  var maj = (parseInt(x[0], 10) || 0);
  _$jscoverage['extensions.js'][51]++;
  var min = (parseInt(x[1], 10) || 0);
  _$jscoverage['extensions.js'][52]++;
  var pat = (parseInt(x[2], 10) || 0);
  _$jscoverage['extensions.js'][53]++;
  return ({major: maj, minor: min, patch: pat});
});
  _$jscoverage['extensions.js'][60]++;
  this.atLeastVersion = (function (actualVersion, minVersion) {
  _$jscoverage['extensions.js'][61]++;
  var minimum = this.parseVersionString(minVersion);
  _$jscoverage['extensions.js'][62]++;
  var running = this.parseVersionString(actualVersion);
  _$jscoverage['extensions.js'][64]++;
  if ((running.major !== minimum.major)) {
    _$jscoverage['extensions.js'][65]++;
    return (running.major > minimum.major);
  }
  else {
    _$jscoverage['extensions.js'][67]++;
    if ((running.minor !== minimum.minor)) {
      _$jscoverage['extensions.js'][68]++;
      return (running.minor > minimum.minor);
    }
    else {
      _$jscoverage['extensions.js'][70]++;
      if ((running.patch !== minimum.patch)) {
        _$jscoverage['extensions.js'][71]++;
        return (running.patch > minimum.patch);
      }
      else {
        _$jscoverage['extensions.js'][73]++;
        return true;
      }
    }
  }
});
}));
