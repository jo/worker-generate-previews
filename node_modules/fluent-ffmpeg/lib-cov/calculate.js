/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['calculate.js']) {
  _$jscoverage['calculate.js'] = [];
  _$jscoverage['calculate.js'][2] = 0;
  _$jscoverage['calculate.js'][3] = 0;
  _$jscoverage['calculate.js'][4] = 0;
  _$jscoverage['calculate.js'][5] = 0;
  _$jscoverage['calculate.js'][6] = 0;
  _$jscoverage['calculate.js'][7] = 0;
  _$jscoverage['calculate.js'][9] = 0;
  _$jscoverage['calculate.js'][13] = 0;
  _$jscoverage['calculate.js'][14] = 0;
  _$jscoverage['calculate.js'][15] = 0;
  _$jscoverage['calculate.js'][17] = 0;
  _$jscoverage['calculate.js'][18] = 0;
  _$jscoverage['calculate.js'][19] = 0;
  _$jscoverage['calculate.js'][21] = 0;
  _$jscoverage['calculate.js'][22] = 0;
  _$jscoverage['calculate.js'][25] = 0;
  _$jscoverage['calculate.js'][29] = 0;
  _$jscoverage['calculate.js'][30] = 0;
  _$jscoverage['calculate.js'][31] = 0;
  _$jscoverage['calculate.js'][34] = 0;
  _$jscoverage['calculate.js'][35] = 0;
  _$jscoverage['calculate.js'][37] = 0;
  _$jscoverage['calculate.js'][39] = 0;
  _$jscoverage['calculate.js'][40] = 0;
  _$jscoverage['calculate.js'][41] = 0;
  _$jscoverage['calculate.js'][42] = 0;
  _$jscoverage['calculate.js'][43] = 0;
  _$jscoverage['calculate.js'][46] = 0;
  _$jscoverage['calculate.js'][52] = 0;
  _$jscoverage['calculate.js'][53] = 0;
  _$jscoverage['calculate.js'][55] = 0;
  _$jscoverage['calculate.js'][56] = 0;
  _$jscoverage['calculate.js'][57] = 0;
  _$jscoverage['calculate.js'][58] = 0;
  _$jscoverage['calculate.js'][59] = 0;
  _$jscoverage['calculate.js'][62] = 0;
  _$jscoverage['calculate.js'][68] = 0;
  _$jscoverage['calculate.js'][73] = 0;
  _$jscoverage['calculate.js'][77] = 0;
  _$jscoverage['calculate.js'][79] = 0;
  _$jscoverage['calculate.js'][80] = 0;
  _$jscoverage['calculate.js'][81] = 0;
  _$jscoverage['calculate.js'][83] = 0;
  _$jscoverage['calculate.js'][85] = 0;
  _$jscoverage['calculate.js'][86] = 0;
  _$jscoverage['calculate.js'][89] = 0;
  _$jscoverage['calculate.js'][90] = 0;
  _$jscoverage['calculate.js'][92] = 0;
  _$jscoverage['calculate.js'][93] = 0;
  _$jscoverage['calculate.js'][96] = 0;
  _$jscoverage['calculate.js'][98] = 0;
  _$jscoverage['calculate.js'][99] = 0;
  _$jscoverage['calculate.js'][100] = 0;
  _$jscoverage['calculate.js'][101] = 0;
  _$jscoverage['calculate.js'][102] = 0;
  _$jscoverage['calculate.js'][105] = 0;
  _$jscoverage['calculate.js'][108] = 0;
  _$jscoverage['calculate.js'][109] = 0;
  _$jscoverage['calculate.js'][111] = 0;
  _$jscoverage['calculate.js'][113] = 0;
  _$jscoverage['calculate.js'][114] = 0;
  _$jscoverage['calculate.js'][117] = 0;
  _$jscoverage['calculate.js'][120] = 0;
  _$jscoverage['calculate.js'][121] = 0;
  _$jscoverage['calculate.js'][122] = 0;
  _$jscoverage['calculate.js'][123] = 0;
  _$jscoverage['calculate.js'][124] = 0;
  _$jscoverage['calculate.js'][127] = 0;
  _$jscoverage['calculate.js'][130] = 0;
  _$jscoverage['calculate.js'][131] = 0;
  _$jscoverage['calculate.js'][133] = 0;
  _$jscoverage['calculate.js'][135] = 0;
  _$jscoverage['calculate.js'][136] = 0;
  _$jscoverage['calculate.js'][139] = 0;
  _$jscoverage['calculate.js'][140] = 0;
  _$jscoverage['calculate.js'][141] = 0;
  _$jscoverage['calculate.js'][143] = 0;
  _$jscoverage['calculate.js'][147] = 0;
  _$jscoverage['calculate.js'][148] = 0;
  _$jscoverage['calculate.js'][150] = 0;
  _$jscoverage['calculate.js'][151] = 0;
  _$jscoverage['calculate.js'][154] = 0;
  _$jscoverage['calculate.js'][156] = 0;
  _$jscoverage['calculate.js'][157] = 0;
  _$jscoverage['calculate.js'][160] = 0;
}
_$jscoverage['calculate.js'].source = ["","exports = module.exports = function Calculate(command) {","  this._aspectIsEqual = function(ar1, ar2) {","    var p1 = this.toAspectRatio(ar1);","    var p2 = this.toAspectRatio(ar2);","    if (p1 === undefined || p2 === undefined) {","      return false;","    } else {","      return (p1.x === p2.x &amp;&amp; p1.y === p2.y);","    }","  };","","  this._calculatePadding = function(data) {","    if (data.video.aspect) {","      var newaspect, padAmount;","      // check if the aspect ratio has changed","      if (this.options.video.aspect &amp;&amp; !this.options.video.size) {","        newaspect = this.options.video.aspect;","      } else if (!this.options.video.aspect) {","        // check aspect ratio change by calculating new aspect ratio from size (using greatest common divider, GCD)","        var ratio = this.gcd(this.options.video.width, this.options.video.height);","        newaspect = this.options.video.width / ratio + ':' + this.options.video.height / ratio;","      } else {","        // we have both aspect ratio and size set, all calculations are fine","        newaspect = this.options.video.aspect;","      }","","      // if there are still no sizes for our output video, assume input size","      if (!this.options.video.width &amp;&amp; !this.options.video.height) {","        this.options.video.width = data.video.resolution.w;","        this.options.video.height = data.video.resolution.h;","      }","","      if (!this._aspectIsEqual(data.video.aspectString, newaspect)) {","        var ardata = this.toAspectRatio(newaspect);","","        if (newaspect === '16:9') {","          // assume conversion from 4:3 to 16:9, pad output video stream left- / right-sided","          var newWidth = parseInt(this.options.video.width / (4 / 3), 10);","          newWidth += (newWidth % 2);","          var wdiff = this.options.video.width - newWidth;","          padAmount = parseInt(wdiff / 2, 10);","          padAmount += (padAmount % 2);","","          // set pad filter options","          this.options.video.pad = {","            x: padAmount,","            y: 0,","            w: this.options.video.width,","            h: this.options.video.height","          };","          this.options.video.size = newWidth + 'x' + this.options.video.height;","        } else if (newaspect === '4:3') {","          // assume conversion from 16:9 to 4:3, add padding to top and bottom","          var newHeight = parseInt(this.options.video.height / (4 / 3), 10);","          newHeight -= (newHeight % 2);","          var hdiff = this.options.video.height - newHeight;","          padAmount = parseInt(hdiff / 2, 10);","          padAmount += (padAmount % 2);","","          // set pad filter options","          this.options.video.pad = {","            x: 0,","            y: padAmount,","            w: this.options.video.width,","            h: this.options.video.height","          };","          this.options.video.size = this.options.video.pad.w + 'x' + newHeight;","        }","      }","    } else {","      // aspect ratio could not be read from source file","      return;","    }","  };","","  this._calculateDimensions = function(data) {","    // load metadata and prepare size calculations","    var fixedWidth = /([0-9]+)x\\?/.exec(this.options.video.size);","    var fixedHeight = /\\?x([0-9]+)/.exec(this.options.video.size);","    var percentRatio = /\\b([0-9]{1,2})%/.exec(this.options.video.size);","","    var w, h;","","    if (!data.video.resolution) {","      return new Error('could not determine video resolution, check your ffmpeg setup');","    }","","    var ratio, ardata;","    if (fixedWidth &amp;&amp; fixedWidth.length &gt; 0) {","      // calculate height of output","      if (!data.video.resolution.w) {","        return new Error('could not determine width of source video, aborting execution');","      }","","      ratio = data.video.resolution.w / parseInt(fixedWidth[1], 10);","      // if we have an aspect ratio target set, calculate new size using AR","      if (this.options.video.aspect !== undefined) {","        ardata = this.toAspectRatio(this.options.video.aspect);","        if (ardata) {","          w = parseInt(fixedWidth[1], 10);","          h = Math.round((w / ardata.x) * ardata.y);","        } else {","          // aspect ratio could not be parsed, return error","          return new Error('could not parse aspect ratio set using withAspect(), aborting execution');","        }","      } else {","        w = parseInt(fixedWidth[1], 10);","        h = Math.round(data.video.resolution.h / ratio);","      }","    } else if (fixedHeight &amp;&amp; fixedHeight.length &gt; 0) {","      // calculate width of output","      if (!data.video.resolution.h) {","        return new Error('could not determine height of source video, aborting execution');","      }","","      ratio = data.video.resolution.h / parseInt(fixedHeight[1], 10);","","      // if we have an aspect ratio target set, calculate new size using AR","      if (this.options.video.aspect !== undefined) {","        ardata = this.toAspectRatio(this.options.video.aspect);","        if (ardata) {","          h = parseInt(fixedHeight[1], 10);","          w = Math.round((h / ardata.y) * ardata.x);","        } else {","          // aspect ratio could not be parsed, return error","          return new Error('could not parse aspect ratio set using withAspect(), aborting execution');","        }","      } else {","        w = Math.round(data.video.resolution.w / ratio);","        h = parseInt(fixedHeight[1], 10);","      }","    } else if (percentRatio &amp;&amp; percentRatio.length &gt; 0) {","      // calculate both height and width of output","      if (!data.video.resolution.w || !data.video.resolution.h) {","        return new Error('could not determine resolution of source video, aborting execution');","      }","","      ratio = parseInt(percentRatio[1], 10) / 100;","      w = Math.round(data.video.resolution.w * ratio);","      h = Math.round(data.video.resolution.h * ratio);","    } else {","      return new Error('could not determine type of size string, aborting execution');","    }","","    // for video resizing, width and height have to be a multiple of 2","    if (w % 2 === 1) {","      w -= 1;","    }","    if (h % 2 === 1) {","      h -= 1;","    }","","    this.options.video.size = w + 'x' + h;","","    this.options.video.width = w;","    this.options.video.height = h;","","  };","  exports.calculateDimensions = this._calculateDimensions;","};"];
_$jscoverage['calculate.js'][2]++;
exports = (module.exports = (function Calculate(command) {
  _$jscoverage['calculate.js'][3]++;
  this._aspectIsEqual = (function (ar1, ar2) {
  _$jscoverage['calculate.js'][4]++;
  var p1 = this.toAspectRatio(ar1);
  _$jscoverage['calculate.js'][5]++;
  var p2 = this.toAspectRatio(ar2);
  _$jscoverage['calculate.js'][6]++;
  if (((p1 === undefined) || (p2 === undefined))) {
    _$jscoverage['calculate.js'][7]++;
    return false;
  }
  else {
    _$jscoverage['calculate.js'][9]++;
    return ((p1.x === p2.x) && (p1.y === p2.y));
  }
});
  _$jscoverage['calculate.js'][13]++;
  this._calculatePadding = (function (data) {
  _$jscoverage['calculate.js'][14]++;
  if (data.video.aspect) {
    _$jscoverage['calculate.js'][15]++;
    var newaspect, padAmount;
    _$jscoverage['calculate.js'][17]++;
    if ((this.options.video.aspect && (! this.options.video.size))) {
      _$jscoverage['calculate.js'][18]++;
      newaspect = this.options.video.aspect;
    }
    else {
      _$jscoverage['calculate.js'][19]++;
      if ((! this.options.video.aspect)) {
        _$jscoverage['calculate.js'][21]++;
        var ratio = this.gcd(this.options.video.width, this.options.video.height);
        _$jscoverage['calculate.js'][22]++;
        newaspect = ((this.options.video.width / ratio) + ":" + (this.options.video.height / ratio));
      }
      else {
        _$jscoverage['calculate.js'][25]++;
        newaspect = this.options.video.aspect;
      }
    }
    _$jscoverage['calculate.js'][29]++;
    if (((! this.options.video.width) && (! this.options.video.height))) {
      _$jscoverage['calculate.js'][30]++;
      this.options.video.width = data.video.resolution.w;
      _$jscoverage['calculate.js'][31]++;
      this.options.video.height = data.video.resolution.h;
    }
    _$jscoverage['calculate.js'][34]++;
    if ((! this._aspectIsEqual(data.video.aspectString, newaspect))) {
      _$jscoverage['calculate.js'][35]++;
      var ardata = this.toAspectRatio(newaspect);
      _$jscoverage['calculate.js'][37]++;
      if ((newaspect === "16:9")) {
        _$jscoverage['calculate.js'][39]++;
        var newWidth = parseInt((this.options.video.width / 1.3333333333333333), 10);
        _$jscoverage['calculate.js'][40]++;
        newWidth += (newWidth % 2);
        _$jscoverage['calculate.js'][41]++;
        var wdiff = (this.options.video.width - newWidth);
        _$jscoverage['calculate.js'][42]++;
        padAmount = parseInt((wdiff / 2), 10);
        _$jscoverage['calculate.js'][43]++;
        padAmount += (padAmount % 2);
        _$jscoverage['calculate.js'][46]++;
        this.options.video.pad = {x: padAmount, y: 0, w: this.options.video.width, h: this.options.video.height};
        _$jscoverage['calculate.js'][52]++;
        this.options.video.size = (newWidth + "x" + this.options.video.height);
      }
      else {
        _$jscoverage['calculate.js'][53]++;
        if ((newaspect === "4:3")) {
          _$jscoverage['calculate.js'][55]++;
          var newHeight = parseInt((this.options.video.height / 1.3333333333333333), 10);
          _$jscoverage['calculate.js'][56]++;
          newHeight -= (newHeight % 2);
          _$jscoverage['calculate.js'][57]++;
          var hdiff = (this.options.video.height - newHeight);
          _$jscoverage['calculate.js'][58]++;
          padAmount = parseInt((hdiff / 2), 10);
          _$jscoverage['calculate.js'][59]++;
          padAmount += (padAmount % 2);
          _$jscoverage['calculate.js'][62]++;
          this.options.video.pad = {x: 0, y: padAmount, w: this.options.video.width, h: this.options.video.height};
          _$jscoverage['calculate.js'][68]++;
          this.options.video.size = (this.options.video.pad.w + "x" + newHeight);
        }
      }
    }
  }
  else {
    _$jscoverage['calculate.js'][73]++;
    return;
  }
});
  _$jscoverage['calculate.js'][77]++;
  this._calculateDimensions = (function (data) {
  _$jscoverage['calculate.js'][79]++;
  var fixedWidth = /([0-9]+)x\?/.exec(this.options.video.size);
  _$jscoverage['calculate.js'][80]++;
  var fixedHeight = /\?x([0-9]+)/.exec(this.options.video.size);
  _$jscoverage['calculate.js'][81]++;
  var percentRatio = /\b([0-9]{1,2})%/.exec(this.options.video.size);
  _$jscoverage['calculate.js'][83]++;
  var w, h;
  _$jscoverage['calculate.js'][85]++;
  if ((! data.video.resolution)) {
    _$jscoverage['calculate.js'][86]++;
    return new Error("could not determine video resolution, check your ffmpeg setup");
  }
  _$jscoverage['calculate.js'][89]++;
  var ratio, ardata;
  _$jscoverage['calculate.js'][90]++;
  if ((fixedWidth && (fixedWidth.length > 0))) {
    _$jscoverage['calculate.js'][92]++;
    if ((! data.video.resolution.w)) {
      _$jscoverage['calculate.js'][93]++;
      return new Error("could not determine width of source video, aborting execution");
    }
    _$jscoverage['calculate.js'][96]++;
    ratio = (data.video.resolution.w / parseInt(fixedWidth[1], 10));
    _$jscoverage['calculate.js'][98]++;
    if ((this.options.video.aspect !== undefined)) {
      _$jscoverage['calculate.js'][99]++;
      ardata = this.toAspectRatio(this.options.video.aspect);
      _$jscoverage['calculate.js'][100]++;
      if (ardata) {
        _$jscoverage['calculate.js'][101]++;
        w = parseInt(fixedWidth[1], 10);
        _$jscoverage['calculate.js'][102]++;
        h = Math.round(((w / ardata.x) * ardata.y));
      }
      else {
        _$jscoverage['calculate.js'][105]++;
        return new Error("could not parse aspect ratio set using withAspect(), aborting execution");
      }
    }
    else {
      _$jscoverage['calculate.js'][108]++;
      w = parseInt(fixedWidth[1], 10);
      _$jscoverage['calculate.js'][109]++;
      h = Math.round((data.video.resolution.h / ratio));
    }
  }
  else {
    _$jscoverage['calculate.js'][111]++;
    if ((fixedHeight && (fixedHeight.length > 0))) {
      _$jscoverage['calculate.js'][113]++;
      if ((! data.video.resolution.h)) {
        _$jscoverage['calculate.js'][114]++;
        return new Error("could not determine height of source video, aborting execution");
      }
      _$jscoverage['calculate.js'][117]++;
      ratio = (data.video.resolution.h / parseInt(fixedHeight[1], 10));
      _$jscoverage['calculate.js'][120]++;
      if ((this.options.video.aspect !== undefined)) {
        _$jscoverage['calculate.js'][121]++;
        ardata = this.toAspectRatio(this.options.video.aspect);
        _$jscoverage['calculate.js'][122]++;
        if (ardata) {
          _$jscoverage['calculate.js'][123]++;
          h = parseInt(fixedHeight[1], 10);
          _$jscoverage['calculate.js'][124]++;
          w = Math.round(((h / ardata.y) * ardata.x));
        }
        else {
          _$jscoverage['calculate.js'][127]++;
          return new Error("could not parse aspect ratio set using withAspect(), aborting execution");
        }
      }
      else {
        _$jscoverage['calculate.js'][130]++;
        w = Math.round((data.video.resolution.w / ratio));
        _$jscoverage['calculate.js'][131]++;
        h = parseInt(fixedHeight[1], 10);
      }
    }
    else {
      _$jscoverage['calculate.js'][133]++;
      if ((percentRatio && (percentRatio.length > 0))) {
        _$jscoverage['calculate.js'][135]++;
        if (((! data.video.resolution.w) || (! data.video.resolution.h))) {
          _$jscoverage['calculate.js'][136]++;
          return new Error("could not determine resolution of source video, aborting execution");
        }
        _$jscoverage['calculate.js'][139]++;
        ratio = (parseInt(percentRatio[1], 10) / 100);
        _$jscoverage['calculate.js'][140]++;
        w = Math.round((data.video.resolution.w * ratio));
        _$jscoverage['calculate.js'][141]++;
        h = Math.round((data.video.resolution.h * ratio));
      }
      else {
        _$jscoverage['calculate.js'][143]++;
        return new Error("could not determine type of size string, aborting execution");
      }
    }
  }
  _$jscoverage['calculate.js'][147]++;
  if (((w % 2) === 1)) {
    _$jscoverage['calculate.js'][148]++;
    w -= 1;
  }
  _$jscoverage['calculate.js'][150]++;
  if (((h % 2) === 1)) {
    _$jscoverage['calculate.js'][151]++;
    h -= 1;
  }
  _$jscoverage['calculate.js'][154]++;
  this.options.video.size = (w + "x" + h);
  _$jscoverage['calculate.js'][156]++;
  this.options.video.width = w;
  _$jscoverage['calculate.js'][157]++;
  this.options.video.height = h;
});
  _$jscoverage['calculate.js'][160]++;
  exports.calculateDimensions = this._calculateDimensions;
}));
