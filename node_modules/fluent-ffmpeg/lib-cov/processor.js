/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['processor.js']) {
  _$jscoverage['processor.js'] = [];
  _$jscoverage['processor.js'][1] = 0;
  _$jscoverage['processor.js'][11] = 0;
  _$jscoverage['processor.js'][12] = 0;
  _$jscoverage['processor.js'][14] = 0;
  _$jscoverage['processor.js'][16] = 0;
  _$jscoverage['processor.js'][18] = 0;
  _$jscoverage['processor.js'][20] = 0;
  _$jscoverage['processor.js'][21] = 0;
  _$jscoverage['processor.js'][24] = 0;
  _$jscoverage['processor.js'][26] = 0;
  _$jscoverage['processor.js'][27] = 0;
  _$jscoverage['processor.js'][30] = 0;
  _$jscoverage['processor.js'][32] = 0;
  _$jscoverage['processor.js'][33] = 0;
  _$jscoverage['processor.js'][37] = 0;
  _$jscoverage['processor.js'][38] = 0;
  _$jscoverage['processor.js'][40] = 0;
  _$jscoverage['processor.js'][41] = 0;
  _$jscoverage['processor.js'][45] = 0;
  _$jscoverage['processor.js'][46] = 0;
  _$jscoverage['processor.js'][47] = 0;
  _$jscoverage['processor.js'][48] = 0;
  _$jscoverage['processor.js'][49] = 0;
  _$jscoverage['processor.js'][50] = 0;
  _$jscoverage['processor.js'][51] = 0;
  _$jscoverage['processor.js'][55] = 0;
  _$jscoverage['processor.js'][56] = 0;
  _$jscoverage['processor.js'][57] = 0;
  _$jscoverage['processor.js'][58] = 0;
  _$jscoverage['processor.js'][59] = 0;
  _$jscoverage['processor.js'][62] = 0;
  _$jscoverage['processor.js'][64] = 0;
  _$jscoverage['processor.js'][66] = 0;
  _$jscoverage['processor.js'][67] = 0;
  _$jscoverage['processor.js'][68] = 0;
  _$jscoverage['processor.js'][70] = 0;
  _$jscoverage['processor.js'][71] = 0;
  _$jscoverage['processor.js'][75] = 0;
  _$jscoverage['processor.js'][76] = 0;
  _$jscoverage['processor.js'][79] = 0;
  _$jscoverage['processor.js'][81] = 0;
  _$jscoverage['processor.js'][82] = 0;
  _$jscoverage['processor.js'][86] = 0;
  _$jscoverage['processor.js'][89] = 0;
  _$jscoverage['processor.js'][92] = 0;
  _$jscoverage['processor.js'][93] = 0;
  _$jscoverage['processor.js'][96] = 0;
  _$jscoverage['processor.js'][97] = 0;
  _$jscoverage['processor.js'][98] = 0;
  _$jscoverage['processor.js'][99] = 0;
  _$jscoverage['processor.js'][101] = 0;
  _$jscoverage['processor.js'][102] = 0;
  _$jscoverage['processor.js'][108] = 0;
  _$jscoverage['processor.js'][110] = 0;
  _$jscoverage['processor.js'][112] = 0;
  _$jscoverage['processor.js'][113] = 0;
  _$jscoverage['processor.js'][114] = 0;
  _$jscoverage['processor.js'][117] = 0;
  _$jscoverage['processor.js'][118] = 0;
  _$jscoverage['processor.js'][121] = 0;
  _$jscoverage['processor.js'][122] = 0;
  _$jscoverage['processor.js'][123] = 0;
  _$jscoverage['processor.js'][126] = 0;
  _$jscoverage['processor.js'][128] = 0;
  _$jscoverage['processor.js'][129] = 0;
  _$jscoverage['processor.js'][132] = 0;
  _$jscoverage['processor.js'][135] = 0;
  _$jscoverage['processor.js'][137] = 0;
  _$jscoverage['processor.js'][139] = 0;
  _$jscoverage['processor.js'][140] = 0;
  _$jscoverage['processor.js'][144] = 0;
  _$jscoverage['processor.js'][145] = 0;
  _$jscoverage['processor.js'][146] = 0;
  _$jscoverage['processor.js'][147] = 0;
  _$jscoverage['processor.js'][148] = 0;
  _$jscoverage['processor.js'][149] = 0;
  _$jscoverage['processor.js'][150] = 0;
  _$jscoverage['processor.js'][154] = 0;
  _$jscoverage['processor.js'][156] = 0;
  _$jscoverage['processor.js'][157] = 0;
  _$jscoverage['processor.js'][158] = 0;
  _$jscoverage['processor.js'][159] = 0;
  _$jscoverage['processor.js'][161] = 0;
  _$jscoverage['processor.js'][162] = 0;
  _$jscoverage['processor.js'][166] = 0;
  _$jscoverage['processor.js'][167] = 0;
  _$jscoverage['processor.js'][170] = 0;
  _$jscoverage['processor.js'][171] = 0;
  _$jscoverage['processor.js'][172] = 0;
  _$jscoverage['processor.js'][175] = 0;
  _$jscoverage['processor.js'][176] = 0;
  _$jscoverage['processor.js'][179] = 0;
  _$jscoverage['processor.js'][180] = 0;
  _$jscoverage['processor.js'][181] = 0;
  _$jscoverage['processor.js'][183] = 0;
  _$jscoverage['processor.js'][184] = 0;
  _$jscoverage['processor.js'][188] = 0;
  _$jscoverage['processor.js'][189] = 0;
  _$jscoverage['processor.js'][191] = 0;
  _$jscoverage['processor.js'][192] = 0;
  _$jscoverage['processor.js'][194] = 0;
  _$jscoverage['processor.js'][196] = 0;
  _$jscoverage['processor.js'][201] = 0;
  _$jscoverage['processor.js'][203] = 0;
  _$jscoverage['processor.js'][205] = 0;
  _$jscoverage['processor.js'][206] = 0;
  _$jscoverage['processor.js'][209] = 0;
  _$jscoverage['processor.js'][210] = 0;
  _$jscoverage['processor.js'][211] = 0;
  _$jscoverage['processor.js'][212] = 0;
  _$jscoverage['processor.js'][213] = 0;
  _$jscoverage['processor.js'][215] = 0;
  _$jscoverage['processor.js'][216] = 0;
  _$jscoverage['processor.js'][217] = 0;
  _$jscoverage['processor.js'][218] = 0;
  _$jscoverage['processor.js'][219] = 0;
  _$jscoverage['processor.js'][220] = 0;
  _$jscoverage['processor.js'][221] = 0;
  _$jscoverage['processor.js'][224] = 0;
  _$jscoverage['processor.js'][227] = 0;
  _$jscoverage['processor.js'][229] = 0;
  _$jscoverage['processor.js'][230] = 0;
  _$jscoverage['processor.js'][231] = 0;
  _$jscoverage['processor.js'][232] = 0;
  _$jscoverage['processor.js'][236] = 0;
  _$jscoverage['processor.js'][237] = 0;
  _$jscoverage['processor.js'][239] = 0;
  _$jscoverage['processor.js'][240] = 0;
  _$jscoverage['processor.js'][242] = 0;
  _$jscoverage['processor.js'][244] = 0;
  _$jscoverage['processor.js'][248] = 0;
  _$jscoverage['processor.js'][249] = 0;
  _$jscoverage['processor.js'][253] = 0;
  _$jscoverage['processor.js'][254] = 0;
  _$jscoverage['processor.js'][255] = 0;
  _$jscoverage['processor.js'][258] = 0;
  _$jscoverage['processor.js'][260] = 0;
  _$jscoverage['processor.js'][264] = 0;
  _$jscoverage['processor.js'][266] = 0;
  _$jscoverage['processor.js'][269] = 0;
  _$jscoverage['processor.js'][270] = 0;
  _$jscoverage['processor.js'][272] = 0;
  _$jscoverage['processor.js'][274] = 0;
  _$jscoverage['processor.js'][276] = 0;
  _$jscoverage['processor.js'][277] = 0;
  _$jscoverage['processor.js'][278] = 0;
  _$jscoverage['processor.js'][281] = 0;
  _$jscoverage['processor.js'][295] = 0;
  _$jscoverage['processor.js'][298] = 0;
  _$jscoverage['processor.js'][300] = 0;
  _$jscoverage['processor.js'][303] = 0;
  _$jscoverage['processor.js'][304] = 0;
  _$jscoverage['processor.js'][307] = 0;
  _$jscoverage['processor.js'][313] = 0;
  _$jscoverage['processor.js'][314] = 0;
  _$jscoverage['processor.js'][316] = 0;
  _$jscoverage['processor.js'][317] = 0;
  _$jscoverage['processor.js'][319] = 0;
  _$jscoverage['processor.js'][320] = 0;
  _$jscoverage['processor.js'][324] = 0;
  _$jscoverage['processor.js'][325] = 0;
  _$jscoverage['processor.js'][327] = 0;
  _$jscoverage['processor.js'][328] = 0;
  _$jscoverage['processor.js'][329] = 0;
  _$jscoverage['processor.js'][332] = 0;
  _$jscoverage['processor.js'][333] = 0;
  _$jscoverage['processor.js'][336] = 0;
  _$jscoverage['processor.js'][338] = 0;
  _$jscoverage['processor.js'][340] = 0;
  _$jscoverage['processor.js'][343] = 0;
  _$jscoverage['processor.js'][344] = 0;
  _$jscoverage['processor.js'][345] = 0;
  _$jscoverage['processor.js'][349] = 0;
  _$jscoverage['processor.js'][350] = 0;
  _$jscoverage['processor.js'][351] = 0;
  _$jscoverage['processor.js'][352] = 0;
  _$jscoverage['processor.js'][353] = 0;
  _$jscoverage['processor.js'][355] = 0;
  _$jscoverage['processor.js'][359] = 0;
  _$jscoverage['processor.js'][364] = 0;
  _$jscoverage['processor.js'][366] = 0;
  _$jscoverage['processor.js'][367] = 0;
  _$jscoverage['processor.js'][368] = 0;
  _$jscoverage['processor.js'][369] = 0;
  _$jscoverage['processor.js'][371] = 0;
  _$jscoverage['processor.js'][380] = 0;
  _$jscoverage['processor.js'][381] = 0;
  _$jscoverage['processor.js'][384] = 0;
  _$jscoverage['processor.js'][388] = 0;
  _$jscoverage['processor.js'][389] = 0;
  _$jscoverage['processor.js'][390] = 0;
  _$jscoverage['processor.js'][391] = 0;
  _$jscoverage['processor.js'][393] = 0;
  _$jscoverage['processor.js'][394] = 0;
  _$jscoverage['processor.js'][396] = 0;
  _$jscoverage['processor.js'][397] = 0;
  _$jscoverage['processor.js'][400] = 0;
  _$jscoverage['processor.js'][401] = 0;
  _$jscoverage['processor.js'][402] = 0;
  _$jscoverage['processor.js'][403] = 0;
  _$jscoverage['processor.js'][407] = 0;
  _$jscoverage['processor.js'][408] = 0;
  _$jscoverage['processor.js'][410] = 0;
  _$jscoverage['processor.js'][411] = 0;
  _$jscoverage['processor.js'][412] = 0;
  _$jscoverage['processor.js'][413] = 0;
  _$jscoverage['processor.js'][416] = 0;
  _$jscoverage['processor.js'][417] = 0;
  _$jscoverage['processor.js'][422] = 0;
  _$jscoverage['processor.js'][423] = 0;
  _$jscoverage['processor.js'][424] = 0;
  _$jscoverage['processor.js'][428] = 0;
  _$jscoverage['processor.js'][429] = 0;
  _$jscoverage['processor.js'][431] = 0;
  _$jscoverage['processor.js'][434] = 0;
  _$jscoverage['processor.js'][435] = 0;
  _$jscoverage['processor.js'][438] = 0;
  _$jscoverage['processor.js'][439] = 0;
  _$jscoverage['processor.js'][443] = 0;
  _$jscoverage['processor.js'][445] = 0;
  _$jscoverage['processor.js'][446] = 0;
  _$jscoverage['processor.js'][448] = 0;
  _$jscoverage['processor.js'][449] = 0;
  _$jscoverage['processor.js'][450] = 0;
  _$jscoverage['processor.js'][451] = 0;
  _$jscoverage['processor.js'][453] = 0;
  _$jscoverage['processor.js'][454] = 0;
  _$jscoverage['processor.js'][456] = 0;
  _$jscoverage['processor.js'][460] = 0;
  _$jscoverage['processor.js'][461] = 0;
  _$jscoverage['processor.js'][465] = 0;
  _$jscoverage['processor.js'][467] = 0;
  _$jscoverage['processor.js'][470] = 0;
  _$jscoverage['processor.js'][471] = 0;
  _$jscoverage['processor.js'][472] = 0;
  _$jscoverage['processor.js'][473] = 0;
  _$jscoverage['processor.js'][478] = 0;
  _$jscoverage['processor.js'][479] = 0;
  _$jscoverage['processor.js'][483] = 0;
  _$jscoverage['processor.js'][484] = 0;
  _$jscoverage['processor.js'][488] = 0;
  _$jscoverage['processor.js'][490] = 0;
  _$jscoverage['processor.js'][492] = 0;
  _$jscoverage['processor.js'][493] = 0;
  _$jscoverage['processor.js'][494] = 0;
  _$jscoverage['processor.js'][496] = 0;
  _$jscoverage['processor.js'][497] = 0;
  _$jscoverage['processor.js'][498] = 0;
  _$jscoverage['processor.js'][502] = 0;
  _$jscoverage['processor.js'][504] = 0;
  _$jscoverage['processor.js'][505] = 0;
  _$jscoverage['processor.js'][507] = 0;
  _$jscoverage['processor.js'][508] = 0;
  _$jscoverage['processor.js'][510] = 0;
  _$jscoverage['processor.js'][511] = 0;
  _$jscoverage['processor.js'][516] = 0;
  _$jscoverage['processor.js'][518] = 0;
  _$jscoverage['processor.js'][520] = 0;
  _$jscoverage['processor.js'][521] = 0;
  _$jscoverage['processor.js'][523] = 0;
  _$jscoverage['processor.js'][524] = 0;
  _$jscoverage['processor.js'][526] = 0;
  _$jscoverage['processor.js'][527] = 0;
  _$jscoverage['processor.js'][529] = 0;
  _$jscoverage['processor.js'][530] = 0;
  _$jscoverage['processor.js'][532] = 0;
  _$jscoverage['processor.js'][533] = 0;
  _$jscoverage['processor.js'][538] = 0;
  _$jscoverage['processor.js'][539] = 0;
  _$jscoverage['processor.js'][540] = 0;
  _$jscoverage['processor.js'][541] = 0;
  _$jscoverage['processor.js'][546] = 0;
  _$jscoverage['processor.js'][548] = 0;
  _$jscoverage['processor.js'][550] = 0;
  _$jscoverage['processor.js'][551] = 0;
  _$jscoverage['processor.js'][557] = 0;
  _$jscoverage['processor.js'][562] = 0;
  _$jscoverage['processor.js'][563] = 0;
  _$jscoverage['processor.js'][567] = 0;
  _$jscoverage['processor.js'][568] = 0;
  _$jscoverage['processor.js'][571] = 0;
  _$jscoverage['processor.js'][572] = 0;
  _$jscoverage['processor.js'][574] = 0;
  _$jscoverage['processor.js'][575] = 0;
  _$jscoverage['processor.js'][579] = 0;
}
_$jscoverage['processor.js'].source = ["var fs       = require('fs'),","    path     = require('path'),","    async    = require('../support/async.min.js'),","    os       = require('os').platform(),","    exec     = require('child_process').exec,","    spawn    = require('child_process').spawn,","    Registry = require('./registry'),","","exports = module.exports = function Processor(command) {","  // constant for timeout checks","  this.E_PROCESSTIMEOUT = -99;","  this._codecDataAlreadySent = false;","","  this.saveToFile = function(targetfile, callback) {","","    callback = callback || function() {};","","    this.options.outputfile = targetfile;","","    var self = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err, meta) {","","      if (err) {","        return callback(null, null, err);","      }","","      var args = self.buildFfmpegArgs(false, meta);","","      if (!args instanceof Array) {","        return callback (null, null, args);","      }","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + self.options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stdout = '';","      var stderr = '';","      ffmpegProc.on('exit', function(code) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        // check if we have to run flvtool2 to update flash video meta data","        if (self.options._updateFlvMetadata === true) {","          // make sure we didn't try to determine this capability before","          if (!Registry.instance.get('capabilityFlvTool2')) {","            // check if flvtool2 is installed","            exec('which flvtool2', function(whichErr, whichStdOut, whichStdErr) {","              if (whichStdOut !== '') {","                Registry.instance.set('capabilityFlvTool2', true);","                // update metadata in flash video","                exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","                  callback(stdout, stderr, null);","                });","              } else {","                // flvtool2 is not installed, skip further checks","                Registry.instance.set('capabilityFlvTool2', false);","                callback(stdout, stderr, null);","              }","            });","          } else if (!Registry.instance.get('capabilityFlvTool2')) {","            // flvtool2 capability was checked before, execute update","            exec('flvtool2 -U ' + self.options.outputfile, function(flvtoolErr, flvtoolStdout, flvtoolStderr) {","              callback(stdout, stderr, null);","            });","          } else {","            // flvtool2 not installed, skip update","            callback(stdout, stderr, null);","          }","        } else {","          callback(stdout, stderr, null);","        }","      });","      ffmpegProc.stdout.on('data', function (data) {","        stdout += data;","      });","","      ffmpegProc.stderr.on('data', function (data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, meta.durationsec);","        }","      });","    });","  };","","  this.writeToStream = function(stream, callback) {","","    callback = callback || function(){};","","    if (!this.options._isStreamable) {","      this.options.logger.error('selected output format is not streamable');","      return callback(null, new Error('selected output format is not streamable'));","    }","","    var self    = this;","    var options = this.options;","","    // parse options to command","    this._prepare(function(err, meta) {","      if (err) {","        return callback(null, err);","      }","","      var args = self.buildFfmpegArgs(true, meta);","","      if (!args instanceof Array) {","        return callback(null, args);","      }","      // write data to stdout","      args.push('pipe:1');","","      // start conversion of file using spawn","      var ffmpegProc = self._spawnProcess(args);","","      if (options.inputstream) {","        // pump input stream to stdin","        options.inputstream.resume();","        options.inputstream.pipe(ffmpegProc.stdin);","      }","","      //handle timeout if set","      var processTimer;","      if (options.timeout) {","        processTimer = setTimeout(function() {","          ffmpegProc.removeAllListeners('exit');","          ffmpegProc.kill('SIGKILL');","          options.logger.warn('process ran into a timeout (' + options.timeout + 's)');","          callback(self.E_PROCESSTIMEOUT, 'timeout');","        }, options.timeout * 1000);","      }","","      var stderr = '';","","      ffmpegProc.stderr.on('data', function(data) {","        stderr += data;","        if (options.onCodecData) {","          self._checkStdErrForCodec(stderr);","        }","        if (options.onProgress) {","          self._getProgressFromStdErr(stderr, meta.durationsec);","        }","      });","","      ffmpegProc.stdout.on('data', function(chunk) {","        stream.write(chunk);","      });","","      ffmpegProc.on('exit', function(code, signal) {","        if (processTimer) {","          clearTimeout(processTimer);","        }","        // close file descriptor on outstream","        if(/^[a-z]+:\\/\\//.test(options.inputfile)) {","          return callback(code, stderr);","        }","","        var cb_ = function() {","          if (!options.inputstream) {","            return callback(code, stderr);","          }","          fs.close(options.inputstream.fd, function() {","            callback(code, stderr);","          });","        };","","        if (stream.fd) {","          return fs.close(stream.fd, cb_);","        }","        if (stream.end) {","          stream.end();","        } else {","          callback(code, \"stream will not be closed\");","        }","        cb_();","      });","    });","  };","","  this.takeScreenshots = function(config, folder, callback) {","","    callback = callback || function(){};","","    function _zeroPad(number, len) {","      return new Array(len-String(number).length+2).join('0')+number;","    }","    ","    function _renderOutputName(j, offset) {","      var result = filename;","      if(/%0*i/.test(result)) {","        var numlen = String(result.match(/%(0*)i/)[1]).length;","        result = result.replace(/%0*i/, _zeroPad(j, numlen));","      }","      result = result.replace('%s', offset);","      result = result.replace('%w', self.options.video.width);","      result = result.replace('%h', self.options.video.height);","      result = result.replace('%r', self.options.video.width+'x'+self.options.video.height);","      result = result.replace('%f', self.options.inputfile);","      result = result.replace('%b', self.options.inputfile.substr(0,self.options.inputfile.lastIndexOf('.')));","      return result;","    }","    ","    function _screenShotInternal(callback) {","","      // get correct dimensions","      self._prepare(function(err, meta) {","","        if (!meta.durationsec) {","          var errString = 'meta data contains no duration, aborting screenshot creation';","          self.options.logger.warn(errString);","          return callback(new Error(errString));","        }","","        // check if all timemarks are inside duration","        if (timemarks !== null) {","          for (var i = 0; i &lt; timemarks.length; i++) {","            /* convert percentage to seconds */","            if( timemarks[i].indexOf('%') &gt; 0 ) {","              timemarks[i] = (parseInt(timemarks[i], 10) / 100) * meta.durationsec;","            }","            if (parseInt(timemarks[i], 10) &gt; (meta.durationsec * 0.9)) {","              // remove timemark from array","              timemarks.splice(i, 1);","            }","          }","          // if there are no more timemarks around, add one at end of the file","          if (timemarks.length === 0) {","            timemarks[0] = (meta.durationsec * 0.9);","          }","        }","        // get positions for screenshots (using duration of file minus 10% to remove fade-in/fade-out)","        var secondOffset = (meta.durationsec * 0.9) / screenshotcount;","        var donecount = 0;","        var series = [];","","        // reset iterator","        var j = 1;","","        var filenames = [];","","        // use async helper function to generate all screenshots and","        // fire callback just once after work is done","        async.until(","          function() {","            return j &gt; screenshotcount;","          },","          function(taskcallback) {","            var offset;","            if (timemarks !== null) {","              // get timemark for current iteration","              offset = timemarks[(j - 1)];","            } else {","              offset = secondOffset * j;","            }","            var fname = _renderOutputName(j, offset) + '.jpg';","            var target = self.escapedPath(folder + '/' + fname);","            var input = self.escapedPath(self.options.inputfile);","","            // build screenshot command","            var command = [","              self.ffmpegPath,","              [","                '-ss', offset,","                '-i', input,","                '-vcodec', 'mjpeg',","                '-vframes', '1',","                '-an',","                '-f', 'rawvideo',","                '-s', self.options.video.size,","                '-y', target","                ].join(' ')","            ];","","            j++;","","            // only set niceness if running on a non-windows platform","            if (self.options.hasOwnProperty('_nice.level') &amp;&amp; !os.match(/win(32|64)/)) {","              // execute ffmpeg through nice","              command.unshift('nice -n', self.options._nice.level||0);","            }","","            exec(command.join(' '), taskcallback);","            filenames.push(fname);","          },","          function(err) {","            callback(err, filenames);","          }","        );","      });","    }","","    var timemarks, screenshotcount, filename;","    if (typeof config === 'object') {","      // use json object as config","      if (config.count) {","        screenshotcount = config.count;","      }","      if (config.timemarks) {","        timemarks = config.timemarks;","      }","    } else {","      // assume screenshot count as parameter","      screenshotcount = config;","      timemarks = null;","    }","    if (!this.options.video.size) {","      this.options.logger.warn(\"set size of thumbnails using 'withSize' method\");","      callback(new Error(\"set size of thumbnails using 'withSize' method\"));","    }","    ","    filename = config.filename || 'tn_%ss';","    if(!/%0*i/.test(filename) &amp;&amp; timemarks.length &gt; 1 ) {","      // if there are multiple timemarks but no %i in filename add one","      // so we won't overwrite the same thumbnail with each timemark","      filename += '_%i'; ","    }","    folder = folder || '.';","    ","    var self = this;","","    // WORKAROUND: exists will be moved from path to fs with node v0.7","    var check = fs.exists;","    if (!check) {","      check = path.exists;","    }","","    // check target folder","    check(folder, function(exists) {","      if (!exists) {","        fs.mkdir(folder, '0755', function(err) {","          if (err !== null) {","            callback(err);","          } else {","            _screenShotInternal(callback);","          }","        });","      } else {","        _screenShotInternal(callback);","      }","    });","  };","","  this._getProgressFromStdErr = function(stderrString, totalDurationSec) {","    // get last stderr line","    var lastLine = stderrString.split(/\\r\\n|\\r|\\n/g);","    var ll = lastLine[lastLine.length - 2];","    var progress = ll.split(/frame=([0-9\\s]+)fps=([0-9\\s]+)q=([0-9\\.\\s]+)(L?)size=([0-9\\s]+)kB time=(([0-9]{2}):([0-9]{2}):([0-9]{2}).([0-9]{2})) bitrate=([0-9\\.\\s]+)kbits/ig);","    if (progress &amp;&amp; progress.length &gt; 10) {","      // build progress report object","      var ret = {","        frames: parseInt(progress[1], 10),","        currentFps: parseInt(progress[2], 10),","        currentKbps: parseFloat(progress[10]),","        targetSize: parseInt(progress[5], 10),","        timemark: progress[6]","      };","","      // calculate percent progress using duration","      if (totalDurationSec &amp;&amp; totalDurationSec &gt; 0) {","        ret.percent = (this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec) * 100;","      }","","      this.options.onProgress(ret);","    }","  };","","  this._checkStdErrForCodec = function(stderrString) {","    var audio = /Audio\\: ([^,]+)/.exec(stderrString);","    var video = /Video\\: ([^,]+)/.exec(stderrString);","    var codecObject = { audio: '', video: '' };","","    if (audio &amp;&amp; audio.length &gt; 1) {","      codecObject.audio = audio[1];","    }","    if (video &amp;&amp; video.length &gt; 1) {","      codecObject.video = video[1];","    }","","    var codecInfoPassed = /Press \\[q\\] to stop/.test(stderrString);","    if (codecInfoPassed) {","      this.options.onCodecData(codecObject);","      this.options.onCodecData = null;","    }","  };","","  this._spawnProcess = function(args, options) {","    var retProc = spawn(this.ffmpegPath, args, options);","    // only re-nice if running on a non-windows platform","    if (this.options.hasOwnProperty('_nice.level') &amp;&amp; !os.match(/win(32|64)/)) {","      var niceLevel = this.options._nice.level || 0;","      if (niceLevel &gt; 0) {","        niceLevel = '+' + niceLevel;","      }","      // renice the spawned process without waiting for callback","      var self = this;","      var command = [","        'renice -n', niceLevel,","        '-p', retProc.pid","      ].join(' ');","","      exec(command, function(err, stderr, stdout) {","        if (!err) {","          self.options.logger.info('successfully reniced process ' + retProc.pid + ' to ' + niceLevel + ' niceness!');","        }","      });","    }","    if (retProc.stderr) {","      retProc.stderr.setEncoding('utf8');","    }","    return retProc;","  };","","  this.buildFfmpegArgs = function(overrideOutputCheck, meta) {","    var args = [];","","    // add startoffset and duration","    if (this.options.starttime) {","      args.push('-ss', this.options.starttime);","    }","","    // add input file (if using fs mode)","    if (this.options.inputfile &amp;&amp; !this.options.inputstream) {","      // add input file fps","      if (this.options.video.fpsInput) {","        args.push('-r', this.options.video.fpsInput);","      }","      if (/^[a-z]+:\\/\\//.exec(this.options.inputfile)) {","        args.push('-i', this.options.inputfile.replace(' ', '%20'));","      } else if (/%\\d*d/.exec(this.options.inputfile)) { // multi-file format - http://ffmpeg.org/ffmpeg.html#image2-1","        args.push('-i', this.options.inputfile.replace(' ', '\\ '));","      } else {","        var fstats = fs.statSync(this.options.inputfile);","        if (fstats.isFile()) {","          // fix for spawn call with path containing spaces and quotes","          args.push('-i', this.options.inputfile.replace(/ /g, \"\\ \")","            .replace(/'/g, \"\\'\")","            .replace(/\"/g, \"\\\"\"));","        } else {","          this.options.logger.error('input file is not readable');","          throw new Error('input file is not readable');","        }","      }","    // check for input stream","    } else if (this.options.inputstream) {","      // push args to make ffmpeg read from stdin","      args.push('-i', '-');","    }","","    if (this.options.otherInputs) {","      if (this.options.otherInputs.length &gt; 0) {","        this.options.otherInputs.forEach(function(el) {","          args.push('-i', el);","        });","      }","    }","","    if (this.options.duration) {","      args.push('-t', this.options.duration);","    }","","    // add format","    if (this.options.format) {","      args.push('-f', this.options.format);","    }","","    // add video options","    if (this.options.video.skip) {","      // skip video stream completely (#45)","      args.push('-vn');","    } else {","      if (this.options.video.bitrate) {","        args.push('-b', this.options.video.bitrate + 'k');","        if (this.options._useConstantVideoBitrate) {","          // add parameters to ensure constant bitrate encoding","          args.push('-maxrate', this.options.video.bitrate + 'k');","          args.push('-minrate', this.options.video.bitrate + 'k');","          args.push('-bufsize', '3M');","        }","      } else {","        // use same quality for output as used in input","        args.push('-sameq');","      }","      if (this.options.video.codec) {","        args.push('-vcodec', this.options.video.codec);","      }","      if (this.options.video.fps) {","        args.push('-r', this.options.video.fps);","      }","      if (this.options.video.aspect) {","        args.push('-aspect', this.options.video.aspect);","      }","    }","","    // add video options","    if (this.options.audio.skip) {","      // skip audio stream completely (#45)","      args.push('-an');","    } else {","      if (this.options.audio.bitrate) {","        args.push('-ab', this.options.audio.bitrate + 'k');","      }","      if (this.options.audio.channels) {","        args.push('-ac', this.options.audio.channels);","      }","      if (this.options.audio.codec) {","        args.push('-acodec', this.options.audio.codec);","      }","      if (this.options.audio.frequency) {","        args.push('-ar', this.options.audio.frequency);","      }","      if (this.options.audio.quality) {","        args.push('-aq', this.options.audio.quality);","      }","    }","","    // add additional options","    if (this.options.additional) {","      if (this.options.additional.length &gt; 0) {","        this.options.additional.forEach(function(el) {","          args.push(el);","        });","      }","    }","","    if (this.options.video.pad &amp;&amp; !this.options.video.skip) {","      // we have padding arguments, push","      if (this.atLeastVersion(meta.ffmpegversion, '0.7')) {","        // padding is not supported ffmpeg &lt; 0.7 (only using legacy commands which were replaced by vfilter calls)","        args.push('-vf');","        args.push('pad=' + this.options.video.pad.w +","          ':' + this.options.video.pad.h +","          ':' + this.options.video.pad.x +","          ':' + this.options.video.pad.y +","          ':' + this.options.video.padcolor);","      } else {","        return new Error(\"Your ffmpeg version \" + meta.ffmpegversion + \" does not support padding\");","      }","    }","","    // add size and output file","    if (this.options.video.size &amp;&amp; !this.options.video.skip) {","      args.push('-s', this.options.video.size);","    }","","    // add output file fps","    if (this.options.video.fpsOutput) {","      args.push('-r', this.options.video.fpsOutput);","    }","","    if (this.options.outputfile) {","      args.push('-y', this.options.outputfile.replace(' ', '\\\\ '));","    } else {","      if (!overrideOutputCheck) {","        this.options.logger.error('no outputfile specified');","      }","    }","//console.log(args);","    return args;","  };","};"];
_$jscoverage['processor.js'][1]++;
var fs = require("fs"), path = require("path"), async = require("../support/async.min.js"), os = require("os").platform(), exec = require("child_process").exec, spawn = require("child_process").spawn, Registry = require("./registry"), exports = (module.exports = (function Processor(command) {
  _$jscoverage['processor.js'][11]++;
  this.E_PROCESSTIMEOUT = -99;
  _$jscoverage['processor.js'][12]++;
  this._codecDataAlreadySent = false;
  _$jscoverage['processor.js'][14]++;
  this.saveToFile = (function (targetfile, callback) {
  _$jscoverage['processor.js'][16]++;
  callback = (callback || (function () {
}));
  _$jscoverage['processor.js'][18]++;
  this.options.outputfile = targetfile;
  _$jscoverage['processor.js'][20]++;
  var self = this;
  _$jscoverage['processor.js'][21]++;
  var options = this.options;
  _$jscoverage['processor.js'][24]++;
  this._prepare((function (err, meta) {
  _$jscoverage['processor.js'][26]++;
  if (err) {
    _$jscoverage['processor.js'][27]++;
    return callback(null, null, err);
  }
  _$jscoverage['processor.js'][30]++;
  var args = self.buildFfmpegArgs(false, meta);
  _$jscoverage['processor.js'][32]++;
  if (((! args) instanceof Array)) {
    _$jscoverage['processor.js'][33]++;
    return callback(null, null, args);
  }
  _$jscoverage['processor.js'][37]++;
  var ffmpegProc = self._spawnProcess(args);
  _$jscoverage['processor.js'][38]++;
  if (options.inputstream) {
    _$jscoverage['processor.js'][40]++;
    options.inputstream.resume();
    _$jscoverage['processor.js'][41]++;
    options.inputstream.pipe(ffmpegProc.stdin);
  }
  _$jscoverage['processor.js'][45]++;
  var processTimer;
  _$jscoverage['processor.js'][46]++;
  if (options.timeout) {
    _$jscoverage['processor.js'][47]++;
    processTimer = setTimeout((function () {
  _$jscoverage['processor.js'][48]++;
  ffmpegProc.removeAllListeners("exit");
  _$jscoverage['processor.js'][49]++;
  ffmpegProc.kill("SIGKILL");
  _$jscoverage['processor.js'][50]++;
  options.logger.warn(("process ran into a timeout (" + self.options.timeout + "s)"));
  _$jscoverage['processor.js'][51]++;
  callback(self.E_PROCESSTIMEOUT, "timeout");
}), (options.timeout * 1000));
  }
  _$jscoverage['processor.js'][55]++;
  var stdout = "";
  _$jscoverage['processor.js'][56]++;
  var stderr = "";
  _$jscoverage['processor.js'][57]++;
  ffmpegProc.on("exit", (function (code) {
  _$jscoverage['processor.js'][58]++;
  if (processTimer) {
    _$jscoverage['processor.js'][59]++;
    clearTimeout(processTimer);
  }
  _$jscoverage['processor.js'][62]++;
  if ((self.options._updateFlvMetadata === true)) {
    _$jscoverage['processor.js'][64]++;
    if ((! Registry.instance.get("capabilityFlvTool2"))) {
      _$jscoverage['processor.js'][66]++;
      exec("which flvtool2", (function (whichErr, whichStdOut, whichStdErr) {
  _$jscoverage['processor.js'][67]++;
  if ((whichStdOut !== "")) {
    _$jscoverage['processor.js'][68]++;
    Registry.instance.set("capabilityFlvTool2", true);
    _$jscoverage['processor.js'][70]++;
    exec(("flvtool2 -U " + self.options.outputfile), (function (flvtoolErr, flvtoolStdout, flvtoolStderr) {
  _$jscoverage['processor.js'][71]++;
  callback(stdout, stderr, null);
}));
  }
  else {
    _$jscoverage['processor.js'][75]++;
    Registry.instance.set("capabilityFlvTool2", false);
    _$jscoverage['processor.js'][76]++;
    callback(stdout, stderr, null);
  }
}));
    }
    else {
      _$jscoverage['processor.js'][79]++;
      if ((! Registry.instance.get("capabilityFlvTool2"))) {
        _$jscoverage['processor.js'][81]++;
        exec(("flvtool2 -U " + self.options.outputfile), (function (flvtoolErr, flvtoolStdout, flvtoolStderr) {
  _$jscoverage['processor.js'][82]++;
  callback(stdout, stderr, null);
}));
      }
      else {
        _$jscoverage['processor.js'][86]++;
        callback(stdout, stderr, null);
      }
    }
  }
  else {
    _$jscoverage['processor.js'][89]++;
    callback(stdout, stderr, null);
  }
}));
  _$jscoverage['processor.js'][92]++;
  ffmpegProc.stdout.on("data", (function (data) {
  _$jscoverage['processor.js'][93]++;
  stdout += data;
}));
  _$jscoverage['processor.js'][96]++;
  ffmpegProc.stderr.on("data", (function (data) {
  _$jscoverage['processor.js'][97]++;
  stderr += data;
  _$jscoverage['processor.js'][98]++;
  if (options.onCodecData) {
    _$jscoverage['processor.js'][99]++;
    self._checkStdErrForCodec(stderr);
  }
  _$jscoverage['processor.js'][101]++;
  if (options.onProgress) {
    _$jscoverage['processor.js'][102]++;
    self._getProgressFromStdErr(stderr, meta.durationsec);
  }
}));
}));
});
  _$jscoverage['processor.js'][108]++;
  this.writeToStream = (function (stream, callback) {
  _$jscoverage['processor.js'][110]++;
  callback = (callback || (function () {
}));
  _$jscoverage['processor.js'][112]++;
  if ((! this.options._isStreamable)) {
    _$jscoverage['processor.js'][113]++;
    this.options.logger.error("selected output format is not streamable");
    _$jscoverage['processor.js'][114]++;
    return callback(null, new Error("selected output format is not streamable"));
  }
  _$jscoverage['processor.js'][117]++;
  var self = this;
  _$jscoverage['processor.js'][118]++;
  var options = this.options;
  _$jscoverage['processor.js'][121]++;
  this._prepare((function (err, meta) {
  _$jscoverage['processor.js'][122]++;
  if (err) {
    _$jscoverage['processor.js'][123]++;
    return callback(null, err);
  }
  _$jscoverage['processor.js'][126]++;
  var args = self.buildFfmpegArgs(true, meta);
  _$jscoverage['processor.js'][128]++;
  if (((! args) instanceof Array)) {
    _$jscoverage['processor.js'][129]++;
    return callback(null, args);
  }
  _$jscoverage['processor.js'][132]++;
  args.push("pipe:1");
  _$jscoverage['processor.js'][135]++;
  var ffmpegProc = self._spawnProcess(args);
  _$jscoverage['processor.js'][137]++;
  if (options.inputstream) {
    _$jscoverage['processor.js'][139]++;
    options.inputstream.resume();
    _$jscoverage['processor.js'][140]++;
    options.inputstream.pipe(ffmpegProc.stdin);
  }
  _$jscoverage['processor.js'][144]++;
  var processTimer;
  _$jscoverage['processor.js'][145]++;
  if (options.timeout) {
    _$jscoverage['processor.js'][146]++;
    processTimer = setTimeout((function () {
  _$jscoverage['processor.js'][147]++;
  ffmpegProc.removeAllListeners("exit");
  _$jscoverage['processor.js'][148]++;
  ffmpegProc.kill("SIGKILL");
  _$jscoverage['processor.js'][149]++;
  options.logger.warn(("process ran into a timeout (" + options.timeout + "s)"));
  _$jscoverage['processor.js'][150]++;
  callback(self.E_PROCESSTIMEOUT, "timeout");
}), (options.timeout * 1000));
  }
  _$jscoverage['processor.js'][154]++;
  var stderr = "";
  _$jscoverage['processor.js'][156]++;
  ffmpegProc.stderr.on("data", (function (data) {
  _$jscoverage['processor.js'][157]++;
  stderr += data;
  _$jscoverage['processor.js'][158]++;
  if (options.onCodecData) {
    _$jscoverage['processor.js'][159]++;
    self._checkStdErrForCodec(stderr);
  }
  _$jscoverage['processor.js'][161]++;
  if (options.onProgress) {
    _$jscoverage['processor.js'][162]++;
    self._getProgressFromStdErr(stderr, meta.durationsec);
  }
}));
  _$jscoverage['processor.js'][166]++;
  ffmpegProc.stdout.on("data", (function (chunk) {
  _$jscoverage['processor.js'][167]++;
  stream.write(chunk);
}));
  _$jscoverage['processor.js'][170]++;
  ffmpegProc.on("exit", (function (code, signal) {
  _$jscoverage['processor.js'][171]++;
  if (processTimer) {
    _$jscoverage['processor.js'][172]++;
    clearTimeout(processTimer);
  }
  _$jscoverage['processor.js'][175]++;
  if (/^[a-z]+:\/\//.test(options.inputfile)) {
    _$jscoverage['processor.js'][176]++;
    return callback(code, stderr);
  }
  _$jscoverage['processor.js'][179]++;
  var cb_ = (function () {
  _$jscoverage['processor.js'][180]++;
  if ((! options.inputstream)) {
    _$jscoverage['processor.js'][181]++;
    return callback(code, stderr);
  }
  _$jscoverage['processor.js'][183]++;
  fs.close(options.inputstream.fd, (function () {
  _$jscoverage['processor.js'][184]++;
  callback(code, stderr);
}));
});
  _$jscoverage['processor.js'][188]++;
  if (stream.fd) {
    _$jscoverage['processor.js'][189]++;
    return fs.close(stream.fd, cb_);
  }
  _$jscoverage['processor.js'][191]++;
  if (stream.end) {
    _$jscoverage['processor.js'][192]++;
    stream.end();
  }
  else {
    _$jscoverage['processor.js'][194]++;
    callback(code, "stream will not be closed");
  }
  _$jscoverage['processor.js'][196]++;
  cb_();
}));
}));
});
  _$jscoverage['processor.js'][201]++;
  this.takeScreenshots = (function (config, folder, callback) {
  _$jscoverage['processor.js'][203]++;
  callback = (callback || (function () {
}));
  _$jscoverage['processor.js'][205]++;
  function _zeroPad(number, len) {
    _$jscoverage['processor.js'][206]++;
    return (new Array(((len - String(number).length) + 2)).join("0") + number);
}
  _$jscoverage['processor.js'][209]++;
  function _renderOutputName(j, offset) {
    _$jscoverage['processor.js'][210]++;
    var result = filename;
    _$jscoverage['processor.js'][211]++;
    if (/%0*i/.test(result)) {
      _$jscoverage['processor.js'][212]++;
      var numlen = String(result.match(/%(0*)i/)[1]).length;
      _$jscoverage['processor.js'][213]++;
      result = result.replace(/%0*i/, _zeroPad(j, numlen));
    }
    _$jscoverage['processor.js'][215]++;
    result = result.replace("%s", offset);
    _$jscoverage['processor.js'][216]++;
    result = result.replace("%w", self.options.video.width);
    _$jscoverage['processor.js'][217]++;
    result = result.replace("%h", self.options.video.height);
    _$jscoverage['processor.js'][218]++;
    result = result.replace("%r", (self.options.video.width + "x" + self.options.video.height));
    _$jscoverage['processor.js'][219]++;
    result = result.replace("%f", self.options.inputfile);
    _$jscoverage['processor.js'][220]++;
    result = result.replace("%b", self.options.inputfile.substr(0, self.options.inputfile.lastIndexOf(".")));
    _$jscoverage['processor.js'][221]++;
    return result;
}
  _$jscoverage['processor.js'][224]++;
  function _screenShotInternal(callback) {
    _$jscoverage['processor.js'][227]++;
    self._prepare((function (err, meta) {
  _$jscoverage['processor.js'][229]++;
  if ((! meta.durationsec)) {
    _$jscoverage['processor.js'][230]++;
    var errString = "meta data contains no duration, aborting screenshot creation";
    _$jscoverage['processor.js'][231]++;
    self.options.logger.warn(errString);
    _$jscoverage['processor.js'][232]++;
    return callback(new Error(errString));
  }
  _$jscoverage['processor.js'][236]++;
  if ((timemarks !== null)) {
    _$jscoverage['processor.js'][237]++;
    for (var i = 0; (i < timemarks.length); (i++)) {
      _$jscoverage['processor.js'][239]++;
      if ((timemarks[i].indexOf("%") > 0)) {
        _$jscoverage['processor.js'][240]++;
        timemarks[i] = ((parseInt(timemarks[i], 10) / 100) * meta.durationsec);
      }
      _$jscoverage['processor.js'][242]++;
      if ((parseInt(timemarks[i], 10) > (meta.durationsec * 0.90000000000000002))) {
        _$jscoverage['processor.js'][244]++;
        timemarks.splice(i, 1);
      }
}
    _$jscoverage['processor.js'][248]++;
    if ((timemarks.length === 0)) {
      _$jscoverage['processor.js'][249]++;
      timemarks[0] = (meta.durationsec * 0.90000000000000002);
    }
  }
  _$jscoverage['processor.js'][253]++;
  var secondOffset = ((meta.durationsec * 0.90000000000000002) / screenshotcount);
  _$jscoverage['processor.js'][254]++;
  var donecount = 0;
  _$jscoverage['processor.js'][255]++;
  var series = [];
  _$jscoverage['processor.js'][258]++;
  var j = 1;
  _$jscoverage['processor.js'][260]++;
  var filenames = [];
  _$jscoverage['processor.js'][264]++;
  async.until((function () {
  _$jscoverage['processor.js'][266]++;
  return (j > screenshotcount);
}), (function (taskcallback) {
  _$jscoverage['processor.js'][269]++;
  var offset;
  _$jscoverage['processor.js'][270]++;
  if ((timemarks !== null)) {
    _$jscoverage['processor.js'][272]++;
    offset = timemarks[(j - 1)];
  }
  else {
    _$jscoverage['processor.js'][274]++;
    offset = (secondOffset * j);
  }
  _$jscoverage['processor.js'][276]++;
  var fname = (_renderOutputName(j, offset) + ".jpg");
  _$jscoverage['processor.js'][277]++;
  var target = self.escapedPath((folder + "/" + fname));
  _$jscoverage['processor.js'][278]++;
  var input = self.escapedPath(self.options.inputfile);
  _$jscoverage['processor.js'][281]++;
  var command = [self.ffmpegPath, ["-ss", offset, "-i", input, "-vcodec", "mjpeg", "-vframes", "1", "-an", "-f", "rawvideo", "-s", self.options.video.size, "-y", target].join(" ")];
  _$jscoverage['processor.js'][295]++;
  (j++);
  _$jscoverage['processor.js'][298]++;
  if ((self.options.hasOwnProperty("_nice.level") && (! os.match(/win(32|64)/)))) {
    _$jscoverage['processor.js'][300]++;
    command.unshift("nice -n", (self.options._nice.level || 0));
  }
  _$jscoverage['processor.js'][303]++;
  exec(command.join(" "), taskcallback);
  _$jscoverage['processor.js'][304]++;
  filenames.push(fname);
}), (function (err) {
  _$jscoverage['processor.js'][307]++;
  callback(err, filenames);
}));
}));
}
  _$jscoverage['processor.js'][313]++;
  var timemarks, screenshotcount, filename;
  _$jscoverage['processor.js'][314]++;
  if (((typeof config) === "object")) {
    _$jscoverage['processor.js'][316]++;
    if (config.count) {
      _$jscoverage['processor.js'][317]++;
      screenshotcount = config.count;
    }
    _$jscoverage['processor.js'][319]++;
    if (config.timemarks) {
      _$jscoverage['processor.js'][320]++;
      timemarks = config.timemarks;
    }
  }
  else {
    _$jscoverage['processor.js'][324]++;
    screenshotcount = config;
    _$jscoverage['processor.js'][325]++;
    timemarks = null;
  }
  _$jscoverage['processor.js'][327]++;
  if ((! this.options.video.size)) {
    _$jscoverage['processor.js'][328]++;
    this.options.logger.warn("set size of thumbnails using 'withSize' method");
    _$jscoverage['processor.js'][329]++;
    callback(new Error("set size of thumbnails using 'withSize' method"));
  }
  _$jscoverage['processor.js'][332]++;
  filename = (config.filename || "tn_%ss");
  _$jscoverage['processor.js'][333]++;
  if (((! /%0*i/.test(filename)) && (timemarks.length > 1))) {
    _$jscoverage['processor.js'][336]++;
    filename += "_%i";
  }
  _$jscoverage['processor.js'][338]++;
  folder = (folder || ".");
  _$jscoverage['processor.js'][340]++;
  var self = this;
  _$jscoverage['processor.js'][343]++;
  var check = fs.exists;
  _$jscoverage['processor.js'][344]++;
  if ((! check)) {
    _$jscoverage['processor.js'][345]++;
    check = path.exists;
  }
  _$jscoverage['processor.js'][349]++;
  check(folder, (function (exists) {
  _$jscoverage['processor.js'][350]++;
  if ((! exists)) {
    _$jscoverage['processor.js'][351]++;
    fs.mkdir(folder, "0755", (function (err) {
  _$jscoverage['processor.js'][352]++;
  if ((err !== null)) {
    _$jscoverage['processor.js'][353]++;
    callback(err);
  }
  else {
    _$jscoverage['processor.js'][355]++;
    _screenShotInternal(callback);
  }
}));
  }
  else {
    _$jscoverage['processor.js'][359]++;
    _screenShotInternal(callback);
  }
}));
});
  _$jscoverage['processor.js'][364]++;
  this._getProgressFromStdErr = (function (stderrString, totalDurationSec) {
  _$jscoverage['processor.js'][366]++;
  var lastLine = stderrString.split(/\r\n|\r|\n/g);
  _$jscoverage['processor.js'][367]++;
  var ll = lastLine[(lastLine.length - 2)];
  _$jscoverage['processor.js'][368]++;
  var progress = ll.split(/frame=([0-9\s]+)fps=([0-9\s]+)q=([0-9\.\s]+)(L?)size=([0-9\s]+)kB time=(([0-9]{2}):([0-9]{2}):([0-9]{2}).([0-9]{2})) bitrate=([0-9\.\s]+)kbits/gi);
  _$jscoverage['processor.js'][369]++;
  if ((progress && (progress.length > 10))) {
    _$jscoverage['processor.js'][371]++;
    var ret = {frames: parseInt(progress[1], 10), currentFps: parseInt(progress[2], 10), currentKbps: parseFloat(progress[10]), targetSize: parseInt(progress[5], 10), timemark: progress[6]};
    _$jscoverage['processor.js'][380]++;
    if ((totalDurationSec && (totalDurationSec > 0))) {
      _$jscoverage['processor.js'][381]++;
      ret.percent = ((this.ffmpegTimemarkToSeconds(ret.timemark) / totalDurationSec) * 100);
    }
    _$jscoverage['processor.js'][384]++;
    this.options.onProgress(ret);
  }
});
  _$jscoverage['processor.js'][388]++;
  this._checkStdErrForCodec = (function (stderrString) {
  _$jscoverage['processor.js'][389]++;
  var audio = /Audio\: ([^,]+)/.exec(stderrString);
  _$jscoverage['processor.js'][390]++;
  var video = /Video\: ([^,]+)/.exec(stderrString);
  _$jscoverage['processor.js'][391]++;
  var codecObject = {audio: "", video: ""};
  _$jscoverage['processor.js'][393]++;
  if ((audio && (audio.length > 1))) {
    _$jscoverage['processor.js'][394]++;
    codecObject.audio = audio[1];
  }
  _$jscoverage['processor.js'][396]++;
  if ((video && (video.length > 1))) {
    _$jscoverage['processor.js'][397]++;
    codecObject.video = video[1];
  }
  _$jscoverage['processor.js'][400]++;
  var codecInfoPassed = /Press \[q\] to stop/.test(stderrString);
  _$jscoverage['processor.js'][401]++;
  if (codecInfoPassed) {
    _$jscoverage['processor.js'][402]++;
    this.options.onCodecData(codecObject);
    _$jscoverage['processor.js'][403]++;
    this.options.onCodecData = null;
  }
});
  _$jscoverage['processor.js'][407]++;
  this._spawnProcess = (function (args, options) {
  _$jscoverage['processor.js'][408]++;
  var retProc = spawn(this.ffmpegPath, args, options);
  _$jscoverage['processor.js'][410]++;
  if ((this.options.hasOwnProperty("_nice.level") && (! os.match(/win(32|64)/)))) {
    _$jscoverage['processor.js'][411]++;
    var niceLevel = (this.options._nice.level || 0);
    _$jscoverage['processor.js'][412]++;
    if ((niceLevel > 0)) {
      _$jscoverage['processor.js'][413]++;
      niceLevel = ("+" + niceLevel);
    }
    _$jscoverage['processor.js'][416]++;
    var self = this;
    _$jscoverage['processor.js'][417]++;
    var command = ["renice -n", niceLevel, "-p", retProc.pid].join(" ");
    _$jscoverage['processor.js'][422]++;
    exec(command, (function (err, stderr, stdout) {
  _$jscoverage['processor.js'][423]++;
  if ((! err)) {
    _$jscoverage['processor.js'][424]++;
    self.options.logger.info(("successfully reniced process " + retProc.pid + " to " + niceLevel + " niceness!"));
  }
}));
  }
  _$jscoverage['processor.js'][428]++;
  if (retProc.stderr) {
    _$jscoverage['processor.js'][429]++;
    retProc.stderr.setEncoding("utf8");
  }
  _$jscoverage['processor.js'][431]++;
  return retProc;
});
  _$jscoverage['processor.js'][434]++;
  this.buildFfmpegArgs = (function (overrideOutputCheck, meta) {
  _$jscoverage['processor.js'][435]++;
  var args = [];
  _$jscoverage['processor.js'][438]++;
  if (this.options.starttime) {
    _$jscoverage['processor.js'][439]++;
    args.push("-ss", this.options.starttime);
  }
  _$jscoverage['processor.js'][443]++;
  if ((this.options.inputfile && (! this.options.inputstream))) {
    _$jscoverage['processor.js'][445]++;
    if (this.options.video.fpsInput) {
      _$jscoverage['processor.js'][446]++;
      args.push("-r", this.options.video.fpsInput);
    }
    _$jscoverage['processor.js'][448]++;
    if (/^[a-z]+:\/\//.exec(this.options.inputfile)) {
      _$jscoverage['processor.js'][449]++;
      args.push("-i", this.options.inputfile.replace(" ", "%20"));
    }
    else {
      _$jscoverage['processor.js'][450]++;
      if (/%\d*d/.exec(this.options.inputfile)) {
        _$jscoverage['processor.js'][451]++;
        args.push("-i", this.options.inputfile.replace(" ", " "));
      }
      else {
        _$jscoverage['processor.js'][453]++;
        var fstats = fs.statSync(this.options.inputfile);
        _$jscoverage['processor.js'][454]++;
        if (fstats.isFile()) {
          _$jscoverage['processor.js'][456]++;
          args.push("-i", this.options.inputfile.replace(/ /g, " ").replace(/'/g, "'").replace(/"/g, "\""));
        }
        else {
          _$jscoverage['processor.js'][460]++;
          this.options.logger.error("input file is not readable");
          _$jscoverage['processor.js'][461]++;
          throw new Error("input file is not readable");
        }
      }
    }
  }
  else {
    _$jscoverage['processor.js'][465]++;
    if (this.options.inputstream) {
      _$jscoverage['processor.js'][467]++;
      args.push("-i", "-");
    }
  }
  _$jscoverage['processor.js'][470]++;
  if (this.options.otherInputs) {
    _$jscoverage['processor.js'][471]++;
    if ((this.options.otherInputs.length > 0)) {
      _$jscoverage['processor.js'][472]++;
      this.options.otherInputs.forEach((function (el) {
  _$jscoverage['processor.js'][473]++;
  args.push("-i", el);
}));
    }
  }
  _$jscoverage['processor.js'][478]++;
  if (this.options.duration) {
    _$jscoverage['processor.js'][479]++;
    args.push("-t", this.options.duration);
  }
  _$jscoverage['processor.js'][483]++;
  if (this.options.format) {
    _$jscoverage['processor.js'][484]++;
    args.push("-f", this.options.format);
  }
  _$jscoverage['processor.js'][488]++;
  if (this.options.video.skip) {
    _$jscoverage['processor.js'][490]++;
    args.push("-vn");
  }
  else {
    _$jscoverage['processor.js'][492]++;
    if (this.options.video.bitrate) {
      _$jscoverage['processor.js'][493]++;
      args.push("-b", (this.options.video.bitrate + "k"));
      _$jscoverage['processor.js'][494]++;
      if (this.options._useConstantVideoBitrate) {
        _$jscoverage['processor.js'][496]++;
        args.push("-maxrate", (this.options.video.bitrate + "k"));
        _$jscoverage['processor.js'][497]++;
        args.push("-minrate", (this.options.video.bitrate + "k"));
        _$jscoverage['processor.js'][498]++;
        args.push("-bufsize", "3M");
      }
    }
    else {
      _$jscoverage['processor.js'][502]++;
      args.push("-sameq");
    }
    _$jscoverage['processor.js'][504]++;
    if (this.options.video.codec) {
      _$jscoverage['processor.js'][505]++;
      args.push("-vcodec", this.options.video.codec);
    }
    _$jscoverage['processor.js'][507]++;
    if (this.options.video.fps) {
      _$jscoverage['processor.js'][508]++;
      args.push("-r", this.options.video.fps);
    }
    _$jscoverage['processor.js'][510]++;
    if (this.options.video.aspect) {
      _$jscoverage['processor.js'][511]++;
      args.push("-aspect", this.options.video.aspect);
    }
  }
  _$jscoverage['processor.js'][516]++;
  if (this.options.audio.skip) {
    _$jscoverage['processor.js'][518]++;
    args.push("-an");
  }
  else {
    _$jscoverage['processor.js'][520]++;
    if (this.options.audio.bitrate) {
      _$jscoverage['processor.js'][521]++;
      args.push("-ab", (this.options.audio.bitrate + "k"));
    }
    _$jscoverage['processor.js'][523]++;
    if (this.options.audio.channels) {
      _$jscoverage['processor.js'][524]++;
      args.push("-ac", this.options.audio.channels);
    }
    _$jscoverage['processor.js'][526]++;
    if (this.options.audio.codec) {
      _$jscoverage['processor.js'][527]++;
      args.push("-acodec", this.options.audio.codec);
    }
    _$jscoverage['processor.js'][529]++;
    if (this.options.audio.frequency) {
      _$jscoverage['processor.js'][530]++;
      args.push("-ar", this.options.audio.frequency);
    }
    _$jscoverage['processor.js'][532]++;
    if (this.options.audio.quality) {
      _$jscoverage['processor.js'][533]++;
      args.push("-aq", this.options.audio.quality);
    }
  }
  _$jscoverage['processor.js'][538]++;
  if (this.options.additional) {
    _$jscoverage['processor.js'][539]++;
    if ((this.options.additional.length > 0)) {
      _$jscoverage['processor.js'][540]++;
      this.options.additional.forEach((function (el) {
  _$jscoverage['processor.js'][541]++;
  args.push(el);
}));
    }
  }
  _$jscoverage['processor.js'][546]++;
  if ((this.options.video.pad && (! this.options.video.skip))) {
    _$jscoverage['processor.js'][548]++;
    if (this.atLeastVersion(meta.ffmpegversion, "0.7")) {
      _$jscoverage['processor.js'][550]++;
      args.push("-vf");
      _$jscoverage['processor.js'][551]++;
      args.push(("pad=" + this.options.video.pad.w + ":" + this.options.video.pad.h + ":" + this.options.video.pad.x + ":" + this.options.video.pad.y + ":" + this.options.video.padcolor));
    }
    else {
      _$jscoverage['processor.js'][557]++;
      return new Error(("Your ffmpeg version " + meta.ffmpegversion + " does not support padding"));
    }
  }
  _$jscoverage['processor.js'][562]++;
  if ((this.options.video.size && (! this.options.video.skip))) {
    _$jscoverage['processor.js'][563]++;
    args.push("-s", this.options.video.size);
  }
  _$jscoverage['processor.js'][567]++;
  if (this.options.video.fpsOutput) {
    _$jscoverage['processor.js'][568]++;
    args.push("-r", this.options.video.fpsOutput);
  }
  _$jscoverage['processor.js'][571]++;
  if (this.options.outputfile) {
    _$jscoverage['processor.js'][572]++;
    args.push("-y", this.options.outputfile.replace(" ", "\\ "));
  }
  else {
    _$jscoverage['processor.js'][574]++;
    if ((! overrideOutputCheck)) {
      _$jscoverage['processor.js'][575]++;
      this.options.logger.error("no outputfile specified");
    }
  }
  _$jscoverage['processor.js'][579]++;
  return args;
});
}));
